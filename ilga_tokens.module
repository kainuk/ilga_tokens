<?php
/*
 * @author Klaas Eikelboom  <klaas.eikelboom@civicoop.org>
 * @date 18-Aug-2020
 * @license  AGPL-3.0
 */
/**
 * Token configuration
 * @return \array[][][]
 */
function ilga_tokens_token_info() {
  return [
    'tokens' => [
       'current-page' => [
          'casefield' => [
            'name' => t('Case Field'),
            'description' => t('Show a custom field on a case')
          ],
         'casetext' => [
           'name' => t('Case Text'),
           'description' => t('Show a custom field on in a dual line text format')
         ]
       ],
      'submission' => [
        'contact-hash' => [
          'name' => t('Webform CiviCRM Contacts Hash'),
          'description' => t('Creates a hash to enable email login'),
          'dynamic' => TRUE,
        ],
      ],
    ]
  ];
}
/**
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 *
 * @return array
 */
function ilga_tokens_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];
  $params = drupal_get_query_parameters();
  if($type == 'current-page' && isset($params['case1'])){
    foreach ($tokens as $fieldname => $original) {
      [$name,$fieldId] = explode(':',$fieldname);
      switch ($name) {
        // Check token is body_trim
        case 'casefield':
          $replacements[$original] = ilga_tokens_helper::instance()->format($fieldId,$params['case1']);
          break;
        case 'casetext':
          $replacements[$original] = ilga_tokens_helper::instance()->formatText($fieldId,$params['case1']);
          break;
      }
    }
  }
  if (_webform_civicrm_isWebformSubmission($type, $data)) {
    $webformSubmissionData = $data['webform-submission'];
    $contactIdsReplacedTokens = _webform_civicrm_replaceContactHashTokens($tokens, $webformSubmissionData);
    $replacements = array_merge($replacements, $contactIdsReplacedTokens);
  }
  return $replacements;
}

function _webform_civicrm_replaceContactHashTokens($tokens, $webformSubmissionData) {
  $replacedTokens = [];

  $tokenValues = token_find_with_prefix($tokens, 'contact-hash');
  if (!$tokenValues) {
    return $replacedTokens;
  }

  foreach ($tokenValues as $entityID => $tokenName) {
    $tokenNewValue = '';
    if (!empty($webformSubmissionData->civicrm['contact'][$entityID]['id'])) {
      $contactId = $webformSubmissionData->civicrm['contact'][$entityID]['id'];
      $tokenNewValue = CRM_Contact_BAO_Contact_Utils::generateChecksum($contactId);;
    }
    $replacedTokens[$tokenName] = $tokenNewValue;
  }



  return $replacedTokens;
}

